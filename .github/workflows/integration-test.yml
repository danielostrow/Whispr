name: Integration Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  integration:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install FFmpeg (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
    
    - name: Install FFmpeg (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install ffmpeg
    
    - name: Install FFmpeg (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install ffmpeg -y
    
    - name: Install OpenMP (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install libomp
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .
    
    - name: Ensure stdbool.h include in vad.c
      run: |
        if [ "${{ runner.os }}" != "Windows" ]; then
          grep -q "#include <stdbool.h>" whispr/c_ext/src/vad.c || sed -i '3a #include <stdbool.h>' whispr/c_ext/src/vad.c
        else
          # Windows version of the same command
          powershell -Command "if (-not (Select-String -Path 'whispr/c_ext/src/vad.c' -Pattern '#include <stdbool.h>' -Quiet)) { (Get-Content 'whispr/c_ext/src/vad.c' | ForEach-Object { if ($_.Contains('#include <float.h>')) { '#include <float.h>'; '#include <stdbool.h>'; } else { $_ } }) | Set-Content 'whispr/c_ext/src/vad.c' }"
        fi
    
    - name: Build C extensions
      run: |
        cd whispr/c_ext
        chmod +x build_extensions.sh
        ./build_extensions.sh
      continue-on-error: true
      if: runner.os != 'Windows'
    
    - name: Build C extensions (Windows)
      if: runner.os == 'Windows'
      run: |
        cd whispr/c_ext
        python setup.py build_ext --inplace
      continue-on-error: true
    
    - name: Download test audio file
      run: |
        mkdir -p test_data
        curl -L -o test_data/test_audio.wav https://filesamples.com/samples/audio/wav/sample1.wav
    
    - name: Run pipeline on test file
      run: |
        mkdir -p output
        python -m whispr.pipeline test_data/test_audio.wav --output-dir output
    
    - name: Verify pipeline output
      run: |
        python -c "import json; import os; assert os.path.exists('output/metadata.json'), 'Metadata file not created'; metadata = json.load(open('output/metadata.json')); assert len(metadata['speakers']) > 0, 'No speakers detected'"
    
    - name: Run application startup test (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Start the app in background and kill after a few seconds
        timeout 10s python -m whispr.ui.app output/metadata.json || code=$?; if [ $code -ne 124 -a $code -ne 0 ]; then exit $code; fi
    
    - name: Run application startup test (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # macOS doesn't have the same timeout command
        python -c "
        import subprocess, threading, time
        process = subprocess.Popen(['python', '-m', 'whispr.ui.app', 'output/metadata.json'])
        time.sleep(10)
        process.terminate()
        "
    
    - name: Run application startup test (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Windows test
        powershell -Command "
        $process = Start-Process -FilePath python -ArgumentList '-m', 'whispr.ui.app', 'output/metadata.json' -PassThru
        Start-Sleep -Seconds 10
        Stop-Process -Id $process.Id -Force
        "
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-output-${{ matrix.os }}
        path: output/ 